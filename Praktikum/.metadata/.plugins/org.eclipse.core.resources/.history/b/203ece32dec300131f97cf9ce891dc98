public class AudioFile {

	// attributes

	String pathname;
	String filename;
	String author;
	String title;

	// constructor 1

	public AudioFile() {

		pathname = "";
		filename = "";
		author = "";
		title = "";
	}

	// constructor 2

	public AudioFile(String file) {

		this();

		parsePathname(file);
		parseFilename(filename);

	}

	// getters

	public String getPathname() {
		return pathname;
	}

	public String getFilename() {
		return filename;
	}

	public String getAuthor() {
		return author;
	}

	public String getTitle() {
		return title;
	}

	// public methods

	public String toString() {
		if (getAuthor().isEmpty()) {
			return title;
		} else {
			return author + " - " + title;
		}
	}

	// parsePathName

	public void parsePathname(String pathname) {

		// sonderfall nur leerzeichen

		if (pathname.trim().length() == 0) {
			this.pathname = pathname;
			filename = pathname;
			return;
		}


		// slashes richten

		pathname = pathname.replace('\\', java.io.File.separatorChar);
		pathname = pathname.replace('/', java.io.File.separatorChar);

		// sonderfall laufwerkname vor dateinamen

		if (pathname.contains(":")) {
			pathname = pathname.replace(':', java.io.File.separatorChar);
			pathname = java.io.File.separator + pathname.substring(0, 1) + pathname.substring(2);
		}

		// doppelte slashes sollen rausfallen

		StringBuffer buffer = new StringBuffer(" ");
		for (int i = 0, ib = 0; i < pathname.length(); i++) {
			if (pathname.charAt(i) != java.io.File.separatorChar || ib == 0
					|| buffer.charAt(ib) != java.io.File.separatorChar) {
				buffer.append(pathname.charAt(i));
				ib++;
			}
		}
		
		// convertiere Puffer
		pathname = buffer.toString().substring(1);

		// sonderfall nur datei

		if (!pathname.contains(java.io.File.separator)) {
			this.pathname = pathname;
			filename = pathname;
			return;
		}
		
		// sonderfall nur pfad
		if(pathname.endsWith(java.io.File.separator)) {
			this.pathname = pathname;
			filename = "";
			return;
		}

		// ab hier pfad und datei

		this.pathname = pathname.trim();
		filename = pathname.substring(pathname
				.lastIndexOf(java.io.File.separatorChar) + 1);
	}

	// parseFileName

	public void parseFilename(String fileName) {

		// SonderfÃ¤lle
		if (fileName.trim().isEmpty()) return;
		
		if (fileName.equals("-")) {
			author = "";
			title = "-";
			return;
		}

		if (fileName.contains(" - ") && fileName.trim().equals("-")) {
			author = "";
			title = "";
			return;
		}

		if (fileName.startsWith(".")) {
			author = "";
			title = "";
			return;
		}

		if (!fileName.contains(" - ")) {
			author = "";
			title = fileName.substring(0, fileName.lastIndexOf("."));
			return;
		}
		// Trennen von Titel und Author

		title = fileName.substring(fileName.lastIndexOf(" - ") + 3,
				fileName.lastIndexOf(".")).trim();
		author = fileName.substring(0, fileName.lastIndexOf(" - ")).trim();

	}
}
